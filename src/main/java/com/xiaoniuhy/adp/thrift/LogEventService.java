/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xiaoniuhy.adp.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-11-20")
public class LogEventService {

  public interface Iface {

    public void batchEvent(java.lang.String topic, java.util.List<java.nio.ByteBuffer> logs) throws org.apache.thrift.TException;

    public void singleEvent(java.lang.String topic, java.nio.ByteBuffer logs) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void batchEvent(java.lang.String topic, java.util.List<java.nio.ByteBuffer> logs, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void singleEvent(java.lang.String topic, java.nio.ByteBuffer logs, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void batchEvent(java.lang.String topic, java.util.List<java.nio.ByteBuffer> logs) throws org.apache.thrift.TException
    {
      send_batchEvent(topic, logs);
    }

    public void send_batchEvent(java.lang.String topic, java.util.List<java.nio.ByteBuffer> logs) throws org.apache.thrift.TException
    {
      batchEvent_args args = new batchEvent_args();
      args.setTopic(topic);
      args.setLogs(logs);
      sendBaseOneway("batchEvent", args);
    }

    public void singleEvent(java.lang.String topic, java.nio.ByteBuffer logs) throws org.apache.thrift.TException
    {
      send_singleEvent(topic, logs);
    }

    public void send_singleEvent(java.lang.String topic, java.nio.ByteBuffer logs) throws org.apache.thrift.TException
    {
      singleEvent_args args = new singleEvent_args();
      args.setTopic(topic);
      args.setLogs(logs);
      sendBaseOneway("singleEvent", args);
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void batchEvent(java.lang.String topic, java.util.List<java.nio.ByteBuffer> logs, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      batchEvent_call method_call = new batchEvent_call(topic, logs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class batchEvent_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String topic;
      private java.util.List<java.nio.ByteBuffer> logs;
      public batchEvent_call(java.lang.String topic, java.util.List<java.nio.ByteBuffer> logs, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.topic = topic;
        this.logs = logs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchEvent", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        batchEvent_args args = new batchEvent_args();
        args.setTopic(topic);
        args.setLogs(logs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void singleEvent(java.lang.String topic, java.nio.ByteBuffer logs, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      singleEvent_call method_call = new singleEvent_call(topic, logs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class singleEvent_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String topic;
      private java.nio.ByteBuffer logs;
      public singleEvent_call(java.lang.String topic, java.nio.ByteBuffer logs, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.topic = topic;
        this.logs = logs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("singleEvent", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        singleEvent_args args = new singleEvent_args();
        args.setTopic(topic);
        args.setLogs(logs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("batchEvent", new batchEvent());
      processMap.put("singleEvent", new singleEvent());
      return processMap;
    }

    public static class batchEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchEvent_args> {
      public batchEvent() {
        super("batchEvent");
      }

      public batchEvent_args getEmptyArgsInstance() {
        return new batchEvent_args();
      }

      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public org.apache.thrift.TBase getResult(I iface, batchEvent_args args) throws org.apache.thrift.TException {
        iface.batchEvent(args.topic, args.logs);
        return null;
      }
    }

    public static class singleEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, singleEvent_args> {
      public singleEvent() {
        super("singleEvent");
      }

      public singleEvent_args getEmptyArgsInstance() {
        return new singleEvent_args();
      }

      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public org.apache.thrift.TBase getResult(I iface, singleEvent_args args) throws org.apache.thrift.TException {
        iface.singleEvent(args.topic, args.logs);
        return null;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("batchEvent", new batchEvent());
      processMap.put("singleEvent", new singleEvent());
      return processMap;
    }

    public static class batchEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batchEvent_args, Void> {
      public batchEvent() {
        super("batchEvent");
      }

      public batchEvent_args getEmptyArgsInstance() {
        return new batchEvent_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, batchEvent_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.batchEvent(args.topic, args.logs,resultHandler);
      }
    }

    public static class singleEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, singleEvent_args, Void> {
      public singleEvent() {
        super("singleEvent");
      }

      public singleEvent_args getEmptyArgsInstance() {
        return new singleEvent_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, singleEvent_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.singleEvent(args.topic, args.logs,resultHandler);
      }
    }

  }

  public static class batchEvent_args implements org.apache.thrift.TBase<batchEvent_args, batchEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<batchEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchEvent_args");

    private static final org.apache.thrift.protocol.TField TOPIC_FIELD_DESC = new org.apache.thrift.protocol.TField("topic", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOGS_FIELD_DESC = new org.apache.thrift.protocol.TField("logs", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new batchEvent_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new batchEvent_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String topic; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> logs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC((short)1, "topic"),
      LOGS((short)2, "logs");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC
            return TOPIC;
          case 2: // LOGS
            return LOGS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC, new org.apache.thrift.meta_data.FieldMetaData("topic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOGS, new org.apache.thrift.meta_data.FieldMetaData("logs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING              , true))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchEvent_args.class, metaDataMap);
    }

    public batchEvent_args() {
    }

    public batchEvent_args(
      java.lang.String topic,
      java.util.List<java.nio.ByteBuffer> logs)
    {
      this();
      this.topic = topic;
      this.logs = logs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchEvent_args(batchEvent_args other) {
      if (other.isSetTopic()) {
        this.topic = other.topic;
      }
      if (other.isSetLogs()) {
        java.util.List<java.nio.ByteBuffer> __this__logs = new java.util.ArrayList<java.nio.ByteBuffer>(other.logs);
        this.logs = __this__logs;
      }
    }

    public batchEvent_args deepCopy() {
      return new batchEvent_args(this);
    }

    @Override
    public void clear() {
      this.topic = null;
      this.logs = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getTopic() {
      return this.topic;
    }

    public batchEvent_args setTopic(@org.apache.thrift.annotation.Nullable java.lang.String topic) {
      this.topic = topic;
      return this;
    }

    public void unsetTopic() {
      this.topic = null;
    }

    /** Returns true if field topic is set (has been assigned a value) and false otherwise */
    public boolean isSetTopic() {
      return this.topic != null;
    }

    public void setTopicIsSet(boolean value) {
      if (!value) {
        this.topic = null;
      }
    }

    public int getLogsSize() {
      return (this.logs == null) ? 0 : this.logs.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.nio.ByteBuffer> getLogsIterator() {
      return (this.logs == null) ? null : this.logs.iterator();
    }

    public void addToLogs(java.nio.ByteBuffer elem) {
      if (this.logs == null) {
        this.logs = new java.util.ArrayList<java.nio.ByteBuffer>();
      }
      this.logs.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.nio.ByteBuffer> getLogs() {
      return this.logs;
    }

    public batchEvent_args setLogs(@org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> logs) {
      this.logs = logs;
      return this;
    }

    public void unsetLogs() {
      this.logs = null;
    }

    /** Returns true if field logs is set (has been assigned a value) and false otherwise */
    public boolean isSetLogs() {
      return this.logs != null;
    }

    public void setLogsIsSet(boolean value) {
      if (!value) {
        this.logs = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case TOPIC:
        if (value == null) {
          unsetTopic();
        } else {
          setTopic((java.lang.String)value);
        }
        break;

      case LOGS:
        if (value == null) {
          unsetLogs();
        } else {
          setLogs((java.util.List<java.nio.ByteBuffer>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC:
        return getTopic();

      case LOGS:
        return getLogs();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TOPIC:
        return isSetTopic();
      case LOGS:
        return isSetLogs();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof batchEvent_args)
        return this.equals((batchEvent_args)that);
      return false;
    }

    public boolean equals(batchEvent_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_topic = true && this.isSetTopic();
      boolean that_present_topic = true && that.isSetTopic();
      if (this_present_topic || that_present_topic) {
        if (!(this_present_topic && that_present_topic))
          return false;
        if (!this.topic.equals(that.topic))
          return false;
      }

      boolean this_present_logs = true && this.isSetLogs();
      boolean that_present_logs = true && that.isSetLogs();
      if (this_present_logs || that_present_logs) {
        if (!(this_present_logs && that_present_logs))
          return false;
        if (!this.logs.equals(that.logs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTopic()) ? 131071 : 524287);
      if (isSetTopic())
        hashCode = hashCode * 8191 + topic.hashCode();

      hashCode = hashCode * 8191 + ((isSetLogs()) ? 131071 : 524287);
      if (isSetLogs())
        hashCode = hashCode * 8191 + logs.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(batchEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTopic()).compareTo(other.isSetTopic());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopic()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topic, other.topic);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLogs()).compareTo(other.isSetLogs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logs, other.logs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("batchEvent_args(");
      boolean first = true;

      sb.append("topic:");
      if (this.topic == null) {
        sb.append("null");
      } else {
        sb.append(this.topic);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("logs:");
      if (this.logs == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.logs, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchEvent_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public batchEvent_argsStandardScheme getScheme() {
        return new batchEvent_argsStandardScheme();
      }
    }

    private static class batchEvent_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<batchEvent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.topic = iprot.readString();
                struct.setTopicIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOGS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list50 = iprot.readListBegin();
                  struct.logs = new java.util.ArrayList<java.nio.ByteBuffer>(_list50.size);
                  @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem51;
                  for (int _i52 = 0; _i52 < _list50.size; ++_i52)
                  {
                    _elem51 = iprot.readBinary();
                    struct.logs.add(_elem51);
                  }
                  iprot.readListEnd();
                }
                struct.setLogsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchEvent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.topic != null) {
          oprot.writeFieldBegin(TOPIC_FIELD_DESC);
          oprot.writeString(struct.topic);
          oprot.writeFieldEnd();
        }
        if (struct.logs != null) {
          oprot.writeFieldBegin(LOGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.logs.size()));
            for (java.nio.ByteBuffer _iter53 : struct.logs)
            {
              oprot.writeBinary(_iter53);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchEvent_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public batchEvent_argsTupleScheme getScheme() {
        return new batchEvent_argsTupleScheme();
      }
    }

    private static class batchEvent_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<batchEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTopic()) {
          optionals.set(0);
        }
        if (struct.isSetLogs()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTopic()) {
          oprot.writeString(struct.topic);
        }
        if (struct.isSetLogs()) {
          {
            oprot.writeI32(struct.logs.size());
            for (java.nio.ByteBuffer _iter54 : struct.logs)
            {
              oprot.writeBinary(_iter54);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.topic = iprot.readString();
          struct.setTopicIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list55 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.logs = new java.util.ArrayList<java.nio.ByteBuffer>(_list55.size);
            @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem56;
            for (int _i57 = 0; _i57 < _list55.size; ++_i57)
            {
              _elem56 = iprot.readBinary();
              struct.logs.add(_elem56);
            }
          }
          struct.setLogsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class singleEvent_args implements org.apache.thrift.TBase<singleEvent_args, singleEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<singleEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("singleEvent_args");

    private static final org.apache.thrift.protocol.TField TOPIC_FIELD_DESC = new org.apache.thrift.protocol.TField("topic", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LOGS_FIELD_DESC = new org.apache.thrift.protocol.TField("logs", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new singleEvent_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new singleEvent_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String topic; // required
    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer logs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC((short)1, "topic"),
      LOGS((short)2, "logs");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC
            return TOPIC;
          case 2: // LOGS
            return LOGS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC, new org.apache.thrift.meta_data.FieldMetaData("topic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LOGS, new org.apache.thrift.meta_data.FieldMetaData("logs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(singleEvent_args.class, metaDataMap);
    }

    public singleEvent_args() {
    }

    public singleEvent_args(
      java.lang.String topic,
      java.nio.ByteBuffer logs)
    {
      this();
      this.topic = topic;
      this.logs = org.apache.thrift.TBaseHelper.copyBinary(logs);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public singleEvent_args(singleEvent_args other) {
      if (other.isSetTopic()) {
        this.topic = other.topic;
      }
      if (other.isSetLogs()) {
        this.logs = org.apache.thrift.TBaseHelper.copyBinary(other.logs);
      }
    }

    public singleEvent_args deepCopy() {
      return new singleEvent_args(this);
    }

    @Override
    public void clear() {
      this.topic = null;
      this.logs = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getTopic() {
      return this.topic;
    }

    public singleEvent_args setTopic(@org.apache.thrift.annotation.Nullable java.lang.String topic) {
      this.topic = topic;
      return this;
    }

    public void unsetTopic() {
      this.topic = null;
    }

    /** Returns true if field topic is set (has been assigned a value) and false otherwise */
    public boolean isSetTopic() {
      return this.topic != null;
    }

    public void setTopicIsSet(boolean value) {
      if (!value) {
        this.topic = null;
      }
    }

    public byte[] getLogs() {
      setLogs(org.apache.thrift.TBaseHelper.rightSize(logs));
      return logs == null ? null : logs.array();
    }

    public java.nio.ByteBuffer bufferForLogs() {
      return org.apache.thrift.TBaseHelper.copyBinary(logs);
    }

    public singleEvent_args setLogs(byte[] logs) {
      this.logs = logs == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(logs.clone());
      return this;
    }

    public singleEvent_args setLogs(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer logs) {
      this.logs = org.apache.thrift.TBaseHelper.copyBinary(logs);
      return this;
    }

    public void unsetLogs() {
      this.logs = null;
    }

    /** Returns true if field logs is set (has been assigned a value) and false otherwise */
    public boolean isSetLogs() {
      return this.logs != null;
    }

    public void setLogsIsSet(boolean value) {
      if (!value) {
        this.logs = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case TOPIC:
        if (value == null) {
          unsetTopic();
        } else {
          setTopic((java.lang.String)value);
        }
        break;

      case LOGS:
        if (value == null) {
          unsetLogs();
        } else {
          if (value instanceof byte[]) {
            setLogs((byte[])value);
          } else {
            setLogs((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC:
        return getTopic();

      case LOGS:
        return getLogs();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TOPIC:
        return isSetTopic();
      case LOGS:
        return isSetLogs();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof singleEvent_args)
        return this.equals((singleEvent_args)that);
      return false;
    }

    public boolean equals(singleEvent_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_topic = true && this.isSetTopic();
      boolean that_present_topic = true && that.isSetTopic();
      if (this_present_topic || that_present_topic) {
        if (!(this_present_topic && that_present_topic))
          return false;
        if (!this.topic.equals(that.topic))
          return false;
      }

      boolean this_present_logs = true && this.isSetLogs();
      boolean that_present_logs = true && that.isSetLogs();
      if (this_present_logs || that_present_logs) {
        if (!(this_present_logs && that_present_logs))
          return false;
        if (!this.logs.equals(that.logs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTopic()) ? 131071 : 524287);
      if (isSetTopic())
        hashCode = hashCode * 8191 + topic.hashCode();

      hashCode = hashCode * 8191 + ((isSetLogs()) ? 131071 : 524287);
      if (isSetLogs())
        hashCode = hashCode * 8191 + logs.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(singleEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTopic()).compareTo(other.isSetTopic());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopic()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topic, other.topic);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLogs()).compareTo(other.isSetLogs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLogs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logs, other.logs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("singleEvent_args(");
      boolean first = true;

      sb.append("topic:");
      if (this.topic == null) {
        sb.append("null");
      } else {
        sb.append(this.topic);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("logs:");
      if (this.logs == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.logs, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class singleEvent_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public singleEvent_argsStandardScheme getScheme() {
        return new singleEvent_argsStandardScheme();
      }
    }

    private static class singleEvent_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<singleEvent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, singleEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.topic = iprot.readString();
                struct.setTopicIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.logs = iprot.readBinary();
                struct.setLogsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, singleEvent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.topic != null) {
          oprot.writeFieldBegin(TOPIC_FIELD_DESC);
          oprot.writeString(struct.topic);
          oprot.writeFieldEnd();
        }
        if (struct.logs != null) {
          oprot.writeFieldBegin(LOGS_FIELD_DESC);
          oprot.writeBinary(struct.logs);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class singleEvent_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public singleEvent_argsTupleScheme getScheme() {
        return new singleEvent_argsTupleScheme();
      }
    }

    private static class singleEvent_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<singleEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, singleEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTopic()) {
          optionals.set(0);
        }
        if (struct.isSetLogs()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTopic()) {
          oprot.writeString(struct.topic);
        }
        if (struct.isSetLogs()) {
          oprot.writeBinary(struct.logs);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, singleEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.topic = iprot.readString();
          struct.setTopicIsSet(true);
        }
        if (incoming.get(1)) {
          struct.logs = iprot.readBinary();
          struct.setLogsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
