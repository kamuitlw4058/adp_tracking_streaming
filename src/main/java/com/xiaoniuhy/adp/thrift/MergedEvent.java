/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.xiaoniuhy.adp.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-11-20")
public class MergedEvent implements org.apache.thrift.TBase<MergedEvent, MergedEvent._Fields>, java.io.Serializable, Cloneable, Comparable<MergedEvent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MergedEvent");

  private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("request_id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("user_id", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField IMP_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("imp_list", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField CLK_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("clk_list", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField LAND_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("land_list", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField MERGE_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("merge_count", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField LAST_UPDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("last_update", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField EXTEND_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("extendMap", org.apache.thrift.protocol.TType.MAP, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MergedEventStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MergedEventTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String request_id; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String user_id; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> imp_list; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> clk_list; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> land_list; // required
  public int merge_count; // required
  public long last_update; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> extendMap; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REQUEST_ID((short)1, "request_id"),
    USER_ID((short)2, "user_id"),
    IMP_LIST((short)3, "imp_list"),
    CLK_LIST((short)4, "clk_list"),
    LAND_LIST((short)5, "land_list"),
    MERGE_COUNT((short)6, "merge_count"),
    LAST_UPDATE((short)7, "last_update"),
    EXTEND_MAP((short)8, "extendMap");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REQUEST_ID
          return REQUEST_ID;
        case 2: // USER_ID
          return USER_ID;
        case 3: // IMP_LIST
          return IMP_LIST;
        case 4: // CLK_LIST
          return CLK_LIST;
        case 5: // LAND_LIST
          return LAND_LIST;
        case 6: // MERGE_COUNT
          return MERGE_COUNT;
        case 7: // LAST_UPDATE
          return LAST_UPDATE;
        case 8: // EXTEND_MAP
          return EXTEND_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MERGE_COUNT_ISSET_ID = 0;
  private static final int __LAST_UPDATE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("request_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("user_id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMP_LIST, new org.apache.thrift.meta_data.FieldMetaData("imp_list", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.CLK_LIST, new org.apache.thrift.meta_data.FieldMetaData("clk_list", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.LAND_LIST, new org.apache.thrift.meta_data.FieldMetaData("land_list", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.MERGE_COUNT, new org.apache.thrift.meta_data.FieldMetaData("merge_count", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_UPDATE, new org.apache.thrift.meta_data.FieldMetaData("last_update", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXTEND_MAP, new org.apache.thrift.meta_data.FieldMetaData("extendMap", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MergedEvent.class, metaDataMap);
  }

  public MergedEvent() {
  }

  public MergedEvent(
    java.lang.String request_id,
    java.lang.String user_id,
    java.util.List<java.lang.Long> imp_list,
    java.util.List<java.lang.Long> clk_list,
    java.util.List<java.lang.Long> land_list,
    int merge_count,
    long last_update,
    java.util.Map<java.lang.String,java.lang.String> extendMap)
  {
    this();
    this.request_id = request_id;
    this.user_id = user_id;
    this.imp_list = imp_list;
    this.clk_list = clk_list;
    this.land_list = land_list;
    this.merge_count = merge_count;
    setMerge_countIsSet(true);
    this.last_update = last_update;
    setLast_updateIsSet(true);
    this.extendMap = extendMap;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MergedEvent(MergedEvent other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetRequest_id()) {
      this.request_id = other.request_id;
    }
    if (other.isSetUser_id()) {
      this.user_id = other.user_id;
    }
    if (other.isSetImp_list()) {
      java.util.List<java.lang.Long> __this__imp_list = new java.util.ArrayList<java.lang.Long>(other.imp_list);
      this.imp_list = __this__imp_list;
    }
    if (other.isSetClk_list()) {
      java.util.List<java.lang.Long> __this__clk_list = new java.util.ArrayList<java.lang.Long>(other.clk_list);
      this.clk_list = __this__clk_list;
    }
    if (other.isSetLand_list()) {
      java.util.List<java.lang.Long> __this__land_list = new java.util.ArrayList<java.lang.Long>(other.land_list);
      this.land_list = __this__land_list;
    }
    this.merge_count = other.merge_count;
    this.last_update = other.last_update;
    if (other.isSetExtendMap()) {
      java.util.Map<java.lang.String,java.lang.String> __this__extendMap = new java.util.HashMap<java.lang.String,java.lang.String>(other.extendMap);
      this.extendMap = __this__extendMap;
    }
  }

  public MergedEvent deepCopy() {
    return new MergedEvent(this);
  }

  @Override
  public void clear() {
    this.request_id = null;
    this.user_id = null;
    this.imp_list = null;
    this.clk_list = null;
    this.land_list = null;
    setMerge_countIsSet(false);
    this.merge_count = 0;
    setLast_updateIsSet(false);
    this.last_update = 0;
    this.extendMap = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getRequest_id() {
    return this.request_id;
  }

  public MergedEvent setRequest_id(@org.apache.thrift.annotation.Nullable java.lang.String request_id) {
    this.request_id = request_id;
    return this;
  }

  public void unsetRequest_id() {
    this.request_id = null;
  }

  /** Returns true if field request_id is set (has been assigned a value) and false otherwise */
  public boolean isSetRequest_id() {
    return this.request_id != null;
  }

  public void setRequest_idIsSet(boolean value) {
    if (!value) {
      this.request_id = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUser_id() {
    return this.user_id;
  }

  public MergedEvent setUser_id(@org.apache.thrift.annotation.Nullable java.lang.String user_id) {
    this.user_id = user_id;
    return this;
  }

  public void unsetUser_id() {
    this.user_id = null;
  }

  /** Returns true if field user_id is set (has been assigned a value) and false otherwise */
  public boolean isSetUser_id() {
    return this.user_id != null;
  }

  public void setUser_idIsSet(boolean value) {
    if (!value) {
      this.user_id = null;
    }
  }

  public int getImp_listSize() {
    return (this.imp_list == null) ? 0 : this.imp_list.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Long> getImp_listIterator() {
    return (this.imp_list == null) ? null : this.imp_list.iterator();
  }

  public void addToImp_list(long elem) {
    if (this.imp_list == null) {
      this.imp_list = new java.util.ArrayList<java.lang.Long>();
    }
    this.imp_list.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Long> getImp_list() {
    return this.imp_list;
  }

  public MergedEvent setImp_list(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> imp_list) {
    this.imp_list = imp_list;
    return this;
  }

  public void unsetImp_list() {
    this.imp_list = null;
  }

  /** Returns true if field imp_list is set (has been assigned a value) and false otherwise */
  public boolean isSetImp_list() {
    return this.imp_list != null;
  }

  public void setImp_listIsSet(boolean value) {
    if (!value) {
      this.imp_list = null;
    }
  }

  public int getClk_listSize() {
    return (this.clk_list == null) ? 0 : this.clk_list.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Long> getClk_listIterator() {
    return (this.clk_list == null) ? null : this.clk_list.iterator();
  }

  public void addToClk_list(long elem) {
    if (this.clk_list == null) {
      this.clk_list = new java.util.ArrayList<java.lang.Long>();
    }
    this.clk_list.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Long> getClk_list() {
    return this.clk_list;
  }

  public MergedEvent setClk_list(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> clk_list) {
    this.clk_list = clk_list;
    return this;
  }

  public void unsetClk_list() {
    this.clk_list = null;
  }

  /** Returns true if field clk_list is set (has been assigned a value) and false otherwise */
  public boolean isSetClk_list() {
    return this.clk_list != null;
  }

  public void setClk_listIsSet(boolean value) {
    if (!value) {
      this.clk_list = null;
    }
  }

  public int getLand_listSize() {
    return (this.land_list == null) ? 0 : this.land_list.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Long> getLand_listIterator() {
    return (this.land_list == null) ? null : this.land_list.iterator();
  }

  public void addToLand_list(long elem) {
    if (this.land_list == null) {
      this.land_list = new java.util.ArrayList<java.lang.Long>();
    }
    this.land_list.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Long> getLand_list() {
    return this.land_list;
  }

  public MergedEvent setLand_list(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> land_list) {
    this.land_list = land_list;
    return this;
  }

  public void unsetLand_list() {
    this.land_list = null;
  }

  /** Returns true if field land_list is set (has been assigned a value) and false otherwise */
  public boolean isSetLand_list() {
    return this.land_list != null;
  }

  public void setLand_listIsSet(boolean value) {
    if (!value) {
      this.land_list = null;
    }
  }

  public int getMerge_count() {
    return this.merge_count;
  }

  public MergedEvent setMerge_count(int merge_count) {
    this.merge_count = merge_count;
    setMerge_countIsSet(true);
    return this;
  }

  public void unsetMerge_count() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MERGE_COUNT_ISSET_ID);
  }

  /** Returns true if field merge_count is set (has been assigned a value) and false otherwise */
  public boolean isSetMerge_count() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MERGE_COUNT_ISSET_ID);
  }

  public void setMerge_countIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MERGE_COUNT_ISSET_ID, value);
  }

  public long getLast_update() {
    return this.last_update;
  }

  public MergedEvent setLast_update(long last_update) {
    this.last_update = last_update;
    setLast_updateIsSet(true);
    return this;
  }

  public void unsetLast_update() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LAST_UPDATE_ISSET_ID);
  }

  /** Returns true if field last_update is set (has been assigned a value) and false otherwise */
  public boolean isSetLast_update() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LAST_UPDATE_ISSET_ID);
  }

  public void setLast_updateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LAST_UPDATE_ISSET_ID, value);
  }

  public int getExtendMapSize() {
    return (this.extendMap == null) ? 0 : this.extendMap.size();
  }

  public void putToExtendMap(java.lang.String key, java.lang.String val) {
    if (this.extendMap == null) {
      this.extendMap = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.extendMap.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getExtendMap() {
    return this.extendMap;
  }

  public MergedEvent setExtendMap(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> extendMap) {
    this.extendMap = extendMap;
    return this;
  }

  public void unsetExtendMap() {
    this.extendMap = null;
  }

  /** Returns true if field extendMap is set (has been assigned a value) and false otherwise */
  public boolean isSetExtendMap() {
    return this.extendMap != null;
  }

  public void setExtendMapIsSet(boolean value) {
    if (!value) {
      this.extendMap = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case REQUEST_ID:
      if (value == null) {
        unsetRequest_id();
      } else {
        setRequest_id((java.lang.String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUser_id();
      } else {
        setUser_id((java.lang.String)value);
      }
      break;

    case IMP_LIST:
      if (value == null) {
        unsetImp_list();
      } else {
        setImp_list((java.util.List<java.lang.Long>)value);
      }
      break;

    case CLK_LIST:
      if (value == null) {
        unsetClk_list();
      } else {
        setClk_list((java.util.List<java.lang.Long>)value);
      }
      break;

    case LAND_LIST:
      if (value == null) {
        unsetLand_list();
      } else {
        setLand_list((java.util.List<java.lang.Long>)value);
      }
      break;

    case MERGE_COUNT:
      if (value == null) {
        unsetMerge_count();
      } else {
        setMerge_count((java.lang.Integer)value);
      }
      break;

    case LAST_UPDATE:
      if (value == null) {
        unsetLast_update();
      } else {
        setLast_update((java.lang.Long)value);
      }
      break;

    case EXTEND_MAP:
      if (value == null) {
        unsetExtendMap();
      } else {
        setExtendMap((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case REQUEST_ID:
      return getRequest_id();

    case USER_ID:
      return getUser_id();

    case IMP_LIST:
      return getImp_list();

    case CLK_LIST:
      return getClk_list();

    case LAND_LIST:
      return getLand_list();

    case MERGE_COUNT:
      return getMerge_count();

    case LAST_UPDATE:
      return getLast_update();

    case EXTEND_MAP:
      return getExtendMap();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case REQUEST_ID:
      return isSetRequest_id();
    case USER_ID:
      return isSetUser_id();
    case IMP_LIST:
      return isSetImp_list();
    case CLK_LIST:
      return isSetClk_list();
    case LAND_LIST:
      return isSetLand_list();
    case MERGE_COUNT:
      return isSetMerge_count();
    case LAST_UPDATE:
      return isSetLast_update();
    case EXTEND_MAP:
      return isSetExtendMap();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof MergedEvent)
      return this.equals((MergedEvent)that);
    return false;
  }

  public boolean equals(MergedEvent that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_request_id = true && this.isSetRequest_id();
    boolean that_present_request_id = true && that.isSetRequest_id();
    if (this_present_request_id || that_present_request_id) {
      if (!(this_present_request_id && that_present_request_id))
        return false;
      if (!this.request_id.equals(that.request_id))
        return false;
    }

    boolean this_present_user_id = true && this.isSetUser_id();
    boolean that_present_user_id = true && that.isSetUser_id();
    if (this_present_user_id || that_present_user_id) {
      if (!(this_present_user_id && that_present_user_id))
        return false;
      if (!this.user_id.equals(that.user_id))
        return false;
    }

    boolean this_present_imp_list = true && this.isSetImp_list();
    boolean that_present_imp_list = true && that.isSetImp_list();
    if (this_present_imp_list || that_present_imp_list) {
      if (!(this_present_imp_list && that_present_imp_list))
        return false;
      if (!this.imp_list.equals(that.imp_list))
        return false;
    }

    boolean this_present_clk_list = true && this.isSetClk_list();
    boolean that_present_clk_list = true && that.isSetClk_list();
    if (this_present_clk_list || that_present_clk_list) {
      if (!(this_present_clk_list && that_present_clk_list))
        return false;
      if (!this.clk_list.equals(that.clk_list))
        return false;
    }

    boolean this_present_land_list = true && this.isSetLand_list();
    boolean that_present_land_list = true && that.isSetLand_list();
    if (this_present_land_list || that_present_land_list) {
      if (!(this_present_land_list && that_present_land_list))
        return false;
      if (!this.land_list.equals(that.land_list))
        return false;
    }

    boolean this_present_merge_count = true;
    boolean that_present_merge_count = true;
    if (this_present_merge_count || that_present_merge_count) {
      if (!(this_present_merge_count && that_present_merge_count))
        return false;
      if (this.merge_count != that.merge_count)
        return false;
    }

    boolean this_present_last_update = true;
    boolean that_present_last_update = true;
    if (this_present_last_update || that_present_last_update) {
      if (!(this_present_last_update && that_present_last_update))
        return false;
      if (this.last_update != that.last_update)
        return false;
    }

    boolean this_present_extendMap = true && this.isSetExtendMap();
    boolean that_present_extendMap = true && that.isSetExtendMap();
    if (this_present_extendMap || that_present_extendMap) {
      if (!(this_present_extendMap && that_present_extendMap))
        return false;
      if (!this.extendMap.equals(that.extendMap))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetRequest_id()) ? 131071 : 524287);
    if (isSetRequest_id())
      hashCode = hashCode * 8191 + request_id.hashCode();

    hashCode = hashCode * 8191 + ((isSetUser_id()) ? 131071 : 524287);
    if (isSetUser_id())
      hashCode = hashCode * 8191 + user_id.hashCode();

    hashCode = hashCode * 8191 + ((isSetImp_list()) ? 131071 : 524287);
    if (isSetImp_list())
      hashCode = hashCode * 8191 + imp_list.hashCode();

    hashCode = hashCode * 8191 + ((isSetClk_list()) ? 131071 : 524287);
    if (isSetClk_list())
      hashCode = hashCode * 8191 + clk_list.hashCode();

    hashCode = hashCode * 8191 + ((isSetLand_list()) ? 131071 : 524287);
    if (isSetLand_list())
      hashCode = hashCode * 8191 + land_list.hashCode();

    hashCode = hashCode * 8191 + merge_count;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(last_update);

    hashCode = hashCode * 8191 + ((isSetExtendMap()) ? 131071 : 524287);
    if (isSetExtendMap())
      hashCode = hashCode * 8191 + extendMap.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(MergedEvent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetRequest_id()).compareTo(other.isSetRequest_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequest_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request_id, other.request_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUser_id()).compareTo(other.isSetUser_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_id, other.user_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetImp_list()).compareTo(other.isSetImp_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImp_list()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imp_list, other.imp_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetClk_list()).compareTo(other.isSetClk_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClk_list()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clk_list, other.clk_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLand_list()).compareTo(other.isSetLand_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLand_list()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.land_list, other.land_list);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMerge_count()).compareTo(other.isSetMerge_count());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMerge_count()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.merge_count, other.merge_count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLast_update()).compareTo(other.isSetLast_update());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLast_update()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last_update, other.last_update);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExtendMap()).compareTo(other.isSetExtendMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtendMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extendMap, other.extendMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("MergedEvent(");
    boolean first = true;

    sb.append("request_id:");
    if (this.request_id == null) {
      sb.append("null");
    } else {
      sb.append(this.request_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("user_id:");
    if (this.user_id == null) {
      sb.append("null");
    } else {
      sb.append(this.user_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("imp_list:");
    if (this.imp_list == null) {
      sb.append("null");
    } else {
      sb.append(this.imp_list);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clk_list:");
    if (this.clk_list == null) {
      sb.append("null");
    } else {
      sb.append(this.clk_list);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("land_list:");
    if (this.land_list == null) {
      sb.append("null");
    } else {
      sb.append(this.land_list);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("merge_count:");
    sb.append(this.merge_count);
    first = false;
    if (!first) sb.append(", ");
    sb.append("last_update:");
    sb.append(this.last_update);
    first = false;
    if (!first) sb.append(", ");
    sb.append("extendMap:");
    if (this.extendMap == null) {
      sb.append("null");
    } else {
      sb.append(this.extendMap);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (request_id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'request_id' was not present! Struct: " + toString());
    }
    if (user_id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'user_id' was not present! Struct: " + toString());
    }
    if (imp_list == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'imp_list' was not present! Struct: " + toString());
    }
    if (clk_list == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'clk_list' was not present! Struct: " + toString());
    }
    if (land_list == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'land_list' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'merge_count' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'last_update' because it's a primitive and you chose the non-beans generator.
    if (extendMap == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'extendMap' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MergedEventStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MergedEventStandardScheme getScheme() {
      return new MergedEventStandardScheme();
    }
  }

  private static class MergedEventStandardScheme extends org.apache.thrift.scheme.StandardScheme<MergedEvent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MergedEvent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REQUEST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.request_id = iprot.readString();
              struct.setRequest_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user_id = iprot.readString();
              struct.setUser_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IMP_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.imp_list = new java.util.ArrayList<java.lang.Long>(_list0.size);
                long _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI64();
                  struct.imp_list.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setImp_listIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CLK_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.clk_list = new java.util.ArrayList<java.lang.Long>(_list3.size);
                long _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readI64();
                  struct.clk_list.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setClk_listIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LAND_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.land_list = new java.util.ArrayList<java.lang.Long>(_list6.size);
                long _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = iprot.readI64();
                  struct.land_list.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setLand_listIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MERGE_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.merge_count = iprot.readI32();
              struct.setMerge_countIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LAST_UPDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.last_update = iprot.readI64();
              struct.setLast_updateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // EXTEND_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map9 = iprot.readMapBegin();
                struct.extendMap = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map9.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key10;
                @org.apache.thrift.annotation.Nullable java.lang.String _val11;
                for (int _i12 = 0; _i12 < _map9.size; ++_i12)
                {
                  _key10 = iprot.readString();
                  _val11 = iprot.readString();
                  struct.extendMap.put(_key10, _val11);
                }
                iprot.readMapEnd();
              }
              struct.setExtendMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetMerge_count()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'merge_count' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetLast_update()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'last_update' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MergedEvent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.request_id != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeString(struct.request_id);
        oprot.writeFieldEnd();
      }
      if (struct.user_id != null) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeString(struct.user_id);
        oprot.writeFieldEnd();
      }
      if (struct.imp_list != null) {
        oprot.writeFieldBegin(IMP_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.imp_list.size()));
          for (long _iter13 : struct.imp_list)
          {
            oprot.writeI64(_iter13);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.clk_list != null) {
        oprot.writeFieldBegin(CLK_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.clk_list.size()));
          for (long _iter14 : struct.clk_list)
          {
            oprot.writeI64(_iter14);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.land_list != null) {
        oprot.writeFieldBegin(LAND_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.land_list.size()));
          for (long _iter15 : struct.land_list)
          {
            oprot.writeI64(_iter15);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MERGE_COUNT_FIELD_DESC);
      oprot.writeI32(struct.merge_count);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_UPDATE_FIELD_DESC);
      oprot.writeI64(struct.last_update);
      oprot.writeFieldEnd();
      if (struct.extendMap != null) {
        oprot.writeFieldBegin(EXTEND_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extendMap.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter16 : struct.extendMap.entrySet())
          {
            oprot.writeString(_iter16.getKey());
            oprot.writeString(_iter16.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MergedEventTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MergedEventTupleScheme getScheme() {
      return new MergedEventTupleScheme();
    }
  }

  private static class MergedEventTupleScheme extends org.apache.thrift.scheme.TupleScheme<MergedEvent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MergedEvent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.request_id);
      oprot.writeString(struct.user_id);
      {
        oprot.writeI32(struct.imp_list.size());
        for (long _iter17 : struct.imp_list)
        {
          oprot.writeI64(_iter17);
        }
      }
      {
        oprot.writeI32(struct.clk_list.size());
        for (long _iter18 : struct.clk_list)
        {
          oprot.writeI64(_iter18);
        }
      }
      {
        oprot.writeI32(struct.land_list.size());
        for (long _iter19 : struct.land_list)
        {
          oprot.writeI64(_iter19);
        }
      }
      oprot.writeI32(struct.merge_count);
      oprot.writeI64(struct.last_update);
      {
        oprot.writeI32(struct.extendMap.size());
        for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter20 : struct.extendMap.entrySet())
        {
          oprot.writeString(_iter20.getKey());
          oprot.writeString(_iter20.getValue());
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MergedEvent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.request_id = iprot.readString();
      struct.setRequest_idIsSet(true);
      struct.user_id = iprot.readString();
      struct.setUser_idIsSet(true);
      {
        org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
        struct.imp_list = new java.util.ArrayList<java.lang.Long>(_list21.size);
        long _elem22;
        for (int _i23 = 0; _i23 < _list21.size; ++_i23)
        {
          _elem22 = iprot.readI64();
          struct.imp_list.add(_elem22);
        }
      }
      struct.setImp_listIsSet(true);
      {
        org.apache.thrift.protocol.TList _list24 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
        struct.clk_list = new java.util.ArrayList<java.lang.Long>(_list24.size);
        long _elem25;
        for (int _i26 = 0; _i26 < _list24.size; ++_i26)
        {
          _elem25 = iprot.readI64();
          struct.clk_list.add(_elem25);
        }
      }
      struct.setClk_listIsSet(true);
      {
        org.apache.thrift.protocol.TList _list27 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
        struct.land_list = new java.util.ArrayList<java.lang.Long>(_list27.size);
        long _elem28;
        for (int _i29 = 0; _i29 < _list27.size; ++_i29)
        {
          _elem28 = iprot.readI64();
          struct.land_list.add(_elem28);
        }
      }
      struct.setLand_listIsSet(true);
      struct.merge_count = iprot.readI32();
      struct.setMerge_countIsSet(true);
      struct.last_update = iprot.readI64();
      struct.setLast_updateIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map30 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.extendMap = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map30.size);
        @org.apache.thrift.annotation.Nullable java.lang.String _key31;
        @org.apache.thrift.annotation.Nullable java.lang.String _val32;
        for (int _i33 = 0; _i33 < _map30.size; ++_i33)
        {
          _key31 = iprot.readString();
          _val32 = iprot.readString();
          struct.extendMap.put(_key31, _val32);
        }
      }
      struct.setExtendMapIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

